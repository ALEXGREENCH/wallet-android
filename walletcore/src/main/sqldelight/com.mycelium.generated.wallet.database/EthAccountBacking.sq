import com.mycelium.wapi.wallet.coins.CryptoCurrency;
import com.mycelium.wapi.wallet.coins.Value;
import com.mycelium.wapi.wallet.eth.EthAddress;
import java.math.BigInteger;
import java.util.UUID;

-- Creates table for transactions

CREATE TABLE IF NOT EXISTS EthAccountBacking (
    txid TEXT NOT NULL,
    uuid TEXT AS UUID NOT NULL,
    fromAddress TEXT NOT NULL,
    toAddress TEXT NOT NULL,
    nonce TEXT AS BigInteger,
    PRIMARY KEY (txid, uuid),
    FOREIGN KEY (txid, uuid)
            REFERENCES AccountBacking (txid, uuid)
            ON DELETE CASCADE
);


selectTransactionSummaries:
SELECT eb.txid, b.currency, b.blockNumber, b.timestamp,
    b.value, b.fee, b.confirmations, eb.fromAddress, eb.toAddress, eb.nonce
FROM EthAccountBacking AS eb
    INNER JOIN AccountBacking AS b
    ON eb.uuid = b.uuid AND eb.txid = b.txid
        WHERE eb.uuid = (:uuid) ORDER BY b.blockNumber DESC, b.timestamp DESC
        LIMIT (:limit) OFFSET (:offset);


-- Selects transactions since time in seconds

selectTransactionSummariesSince:
SELECT eb.txid, b.currency, b.blockNumber, b.timestamp,
    b.value, b.fee, b.confirmations, eb.fromAddress, eb.toAddress, eb.nonce
FROM EthAccountBacking AS eb
    INNER JOIN AccountBacking AS b
    ON eb.uuid = b.uuid AND eb.txid = b.txid
        WHERE eb.uuid = (:uuid) AND b.timestamp > (:timestamp)
        ORDER BY b.blockNumber DESC, b.timestamp DESC;

selectTransactionSummaryById:
SELECT eb.txid, b.currency, b.blockNumber, b.timestamp, b.value, b.fee,
    b.confirmations, eb.fromAddress, eb.toAddress, eb.nonce
FROM EthAccountBacking AS eb
    INNER JOIN AccountBacking AS b
    ON eb.uuid = b.uuid AND eb.txid = b.txid
        WHERE eb.uuid = (?) AND eb.txid = (?);

insertTransaction:
INSERT OR REPLACE INTO EthAccountBacking(txid, uuid, fromAddress, toAddress, nonce)
VALUES (?, ?, ?, ?, ?);

deleteTransaction:
DELETE FROM EthAccountBacking
WHERE uuid = (?) AND txid = (?);
